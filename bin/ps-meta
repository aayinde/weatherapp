#!/usr/bin/env php
<?php
$app = require __DIR__ . '/../boot/app.php';
$app->setRequiredCliVars();
$app->prepareRoutes();

// Configs ---------------------------------------------------------------------
$configs = [];
foreach (App::locator()->listFiles(CONFIG_DIR) as $file) {
    $name = substr($file, strrpos($file, DIRECTORY_SEPARATOR) + 1);
    if ($name === '_config.php' || ! str_ends_with($name, '.php')) {
        continue;
    }
    $name = substr($name, 0, -4);
    $configs[$name] = array_keys(require $file);
    sort($configs[$name]);
}
ksort($configs);

// Helpers ---------------------------------------------------------------------
$helpers = [];
foreach (App::locator()->getFiles('Helpers') as $file) {
    $helpers[] = substr($file, strrpos($file, DIRECTORY_SEPARATOR) + 1, -4);
}
sort($helpers);

// Languages -------------------------------------------------------------------
$languagesDir = APP_DIR . 'Languages/' . App::language()->getDefaultLocale() . '/';
$langs = [];
foreach (App::locator()->listFiles($languagesDir) as $file) {
    $lines = require $file;
    $lines = array_keys($lines);
    $file = substr($file, strlen($languagesDir), -4);
    foreach ($lines as $line) {
        $langs[] = $file . '.' . $line;
    }
}
sort($langs);

// Routes ----------------------------------------------------------------------
$routes = [];
foreach (App::router()->getRoutes() as $methodRoutes) {
    foreach ($methodRoutes as $route) {
        $name = $route->getName();
        if ($name === null) {
            continue;
        }
        $routes[] = $name;
    }
}
sort($routes);

// Views -----------------------------------------------------------------------
$config = App::config()->get('view');
$viewsDir = realpath($config['base_dir']) . DIRECTORY_SEPARATOR;
$views = [];
$layouts = [];
$includes = [];
$viewsDirLength = strlen($viewsDir);
$extensionLength = strlen($config['extension']);
$files = App::locator()->listFiles($viewsDir);
foreach ($files as $file) {
    $file = substr($file, $viewsDirLength, -$extensionLength);
    if (str_starts_with($file, $config['layout_prefix'] . DIRECTORY_SEPARATOR)) {
        $layouts[] = substr($file, strlen($config['layout_prefix'] . DIRECTORY_SEPARATOR));
        continue;
    }
    if (str_starts_with($file, $config['include_prefix'] . DIRECTORY_SEPARATOR)) {
        $includes[] = substr($file, strlen($config['include_prefix'] . DIRECTORY_SEPARATOR));
        continue;
    }
    $views[] = $file;
}

// -----------------------------------------------------------------------------
ob_start();
?>
@php namespace PHPSTORM_META;

// Configs
registerArgumentsSet(
    'configs',
<?php foreach (array_keys($configs) as $name): ?>
    <?= "'{$name}',\n" ?>
<?php endforeach ?>
);
expectedArguments(
    \config(),
    0,
    argumentsSet('configs')
);
<?php
foreach ($configs as $name => $instances):
    $setName = 'configs_' . strtr($name, ['-' => '_']);
    $serviceName = ucwords($name,'-_');
    $serviceName = strtr($serviceName, ['-' => '', '_' => '']);
    $serviceName = lcfirst($serviceName);
?>

registerArgumentsSet(
    '<?= $setName ?>',
<?php foreach ($instances as $instance): ?>
    '<?= $instance ?>',
<?php endforeach ?>
);
expectedArguments(
    \App::<?= $serviceName ?>(),
    0,
    argumentsSet('<?= $setName ?>')
);
<?php endforeach ?>

// Helpers
registerArgumentsSet(
    'helpers',
<?php foreach ($helpers as $helper): ?>
    <?= "'{$helper}',\n" ?>
<?php endforeach ?>
);
expectedArguments(
    \helpers(),
    0,
    argumentsSet('helpers')
);

// Languages
registerArgumentsSet(
    'langs',
<?php foreach ($langs as $lang): ?>
    <?= "'{$lang}',\n" ?>
<?php endforeach ?>
);
expectedArguments(
    \lang(),
    0,
    argumentsSet('langs')
);

// Routes
registerArgumentsSet(
    'routes',
<?php foreach ($routes as $route): ?>
    <?= "'{$route}',\n" ?>
<?php endforeach ?>
);
expectedArguments(
    \Framework\Routing\Router::getNamedRoute(),
    0,
    argumentsSet('routes')
);
expectedArguments(
    \Framework\Routing\Router::hasNamedRoute(),
    0,
    argumentsSet('routes')
);
expectedArguments(
    \route_url(),
    0,
    argumentsSet('routes')
);

// Views
registerArgumentsSet(
    'views',
<?php foreach ($views as $view): ?>
    <?= "'{$view}',\n" ?>
<?php endforeach ?>
);
expectedArguments(
    \Framework\MVC\Controller::render(),
    0,
    argumentsSet('views')
);
expectedArguments(
    \view(),
    0,
    argumentsSet('views')
);

registerArgumentsSet(
    'views_layouts',
<?php foreach ($layouts as $layout): ?>
    <?= "'{$layout}',\n" ?>
<?php endforeach ?>
);
expectedArguments(
    \Framework\MVC\View::extends(),
    0,
    argumentsSet('views_layouts')
);
expectedArguments(
    \Framework\MVC\View::isExtending(),
    0,
    argumentsSet('views_layouts')
);

registerArgumentsSet(
    'views_includes',
<?php foreach ($includes as $include): ?>
    <?= "'{$include}',\n" ?>
<?php endforeach ?>
);
expectedArguments(
    \Framework\MVC\View::include(),
    0,
    argumentsSet('views_includes')
);
<?php
// -----------------------------------------------------------------------------
$contents = ob_get_clean();
$contents = strtr($contents, ['@php' => '<?php']);
file_put_contents(ROOT_DIR . '.phpstorm.meta.php', $contents);
